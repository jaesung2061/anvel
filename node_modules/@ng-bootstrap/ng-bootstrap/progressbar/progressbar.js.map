{"version":3,"file":"progressbar.js","sourceRoot":"","sources":["../../src/progressbar/progressbar.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,uBAAuB,EAAC,MAAM,eAAe;OAChE,EAAC,eAAe,EAAC,MAAM,cAAc;OACrC,EAAC,oBAAoB,EAAC,MAAM,sBAAsB;AAEzD;;GAEG;AAEH;IA2BE,wBAAY,MAA4B;QALxC;;WAEG;QACF,UAAK,GAAG,CAAC,CAAC;QAGT,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1B,CAAC;IAED,iCAAQ,GAAR,cAAa,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAE5D,wCAAe,GAAf,cAAoB,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACzD,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,iBAAiB;oBAC3B,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,QAAQ,EAAE,yXAQT;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,6BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,oBAAoB,GAAG;KAC7B,CAAC;IACK,6BAAc,GAA2C;QAChE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACzB,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAC1B,CAAC;IACF,qBAAC;AAAD,CAAC,AA/DD,IA+DC","sourcesContent":["import {Component, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {getValueInRange} from '../util/util';\nimport {NgbProgressbarConfig} from './progressbar-config';\n\n/**\n * Directive that can be used to provide feedback on the progress of a workflow or an action.\n */\n\nexport class NgbProgressbar {\n  /**\n   * Maximal value to be displayed in the progressbar.\n   */\n   max: number;\n\n  /**\n   * A flag indicating if the stripes of the progress bar should be animated. Takes effect only for browsers\n   * supporting CSS3 animations, and if striped is true.\n   */\n   animated: boolean;\n\n  /**\n   * A flag indicating if a progress bar should be displayed as striped.\n   */\n   striped: boolean;\n\n  /**\n   * Type of progress bar, can be one of \"success\", \"info\", \"warning\" or \"danger\".\n   */\n   type: string;\n\n  /**\n   * Current value to be displayed in the progressbar. Should be smaller or equal to \"max\" value.\n   */\n   value = 0;\n\n  constructor(config: NgbProgressbarConfig) {\n    this.max = config.max;\n    this.animated = config.animated;\n    this.striped = config.striped;\n    this.type = config.type;\n  }\n\n  getValue() { return getValueInRange(this.value, this.max); }\n\n  getPercentValue() { return 100 * this.getValue() / this.max; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-progressbar',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <progress class=\"progress{{type ? ' progress-' + type : ''}}{{animated ? ' progress-animated' : ''}}{{striped ? \n    ' progress-striped' : ''}}\" \n      [max]=\"max\" [value]=\"getValue()\">\n      <div class=\"progress\">\n        <span class=\"progress-bar\" [style.width.%]=\"getPercentValue()\"><ng-content></ng-content></span>\n      </div>\n    </progress>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbProgressbarConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'max': [{ type: Input },],\n'animated': [{ type: Input },],\n'striped': [{ type: Input },],\n'type': [{ type: Input },],\n'value': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}