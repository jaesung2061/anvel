{"version":3,"file":"ngb-calendar.js","sourceRoot":"","sources":["../../src/datepicker/ngb-calendar.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgbDate} from './ngb-date';\nimport {Injectable} from '@angular/core';\nimport {isNumber} from '../util/util';\n\nfunction fromJSDate(jsDate: Date) {\n  return new NgbDate(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());\n}\nfunction toJSDate(date: NgbDate) {\n  const jsDate = new Date(date.year, date.month - 1, date.day);\n  // this is done avoid 30 -> 1930 conversion\n  if (!isNaN(jsDate.getTime())) {\n    jsDate.setFullYear(date.year);\n  }\n  return jsDate;\n}\n\nexport type NgbPeriod = 'y' | 'm' | 'd';\n\n\nexport abstract class NgbCalendar {\n  abstract getDaysPerWeek(): number;\n  abstract getMonths(): number[];\n  abstract getWeeksPerMonth(): number;\n  abstract getWeekday(date: NgbDate): number;\n\n  abstract getNext(date: NgbDate, period?: NgbPeriod, number?: number): NgbDate;\n  abstract getPrev(date: NgbDate, period?: NgbPeriod, number?: number): NgbDate;\n\n  abstract getWeekNumber(week: NgbDate[], firstDayOfWeek: number): number;\n\n  abstract getToday(): NgbDate;\n\n  abstract isValid(date: NgbDate): boolean;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\n\nexport class NgbCalendarGregorian extends NgbCalendar {\n  getDaysPerWeek() { return 7; }\n\n  getMonths() { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; }\n\n  getWeeksPerMonth() { return 6; }\n\n  getNext(date: NgbDate, period: NgbPeriod = 'd', number = 1) {\n    let jsDate = toJSDate(date);\n\n    switch (period) {\n      case 'y':\n        return new NgbDate(date.year + number, 1, 1);\n      case 'm':\n        jsDate = new Date(date.year, date.month + number - 1, 1);\n        break;\n      case 'd':\n        jsDate.setDate(jsDate.getDate() + number);\n        break;\n      default:\n        return date;\n    }\n\n    return fromJSDate(jsDate);\n  }\n\n  getPrev(date: NgbDate, period: NgbPeriod = 'd', number = 1) { return this.getNext(date, period, -number); }\n\n  getWeekday(date: NgbDate) {\n    let jsDate = toJSDate(date);\n    let day = jsDate.getDay();\n    // in JS Date Sun=0, in ISO 8601 Sun=7\n    return day === 0 ? 7 : day;\n  }\n\n  getWeekNumber(week: NgbDate[], firstDayOfWeek: number) {\n    // in JS Date Sun=0, in ISO 8601 Sun=7\n    if (firstDayOfWeek === 7) {\n      firstDayOfWeek = 0;\n    }\n\n    const thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\n    let date = week[thursdayIndex];\n\n    const jsDate = toJSDate(date);\n    jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7));  // Thursday\n    const time = jsDate.getTime();\n    jsDate.setMonth(0);  // Compare with Jan 1\n    jsDate.setDate(1);\n    return Math.floor(Math.round((time - jsDate.getTime()) / 86400000) / 7) + 1;\n  }\n\n  getToday(): NgbDate { return fromJSDate(new Date()); }\n\n  isValid(date: NgbDate): boolean {\n    return date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day) &&\n        !isNaN(toJSDate(date).getTime());\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}