{"version":3,"file":"modal.js","sourceRoot":"","sources":["../../src/modal/modal.ts"],"names":[],"mappings":"OAAO,EAAC,UAAU,EAAE,QAAQ,EAAE,wBAAwB,EAAC,MAAM,eAAe;OAErE,EAAC,aAAa,EAAC,MAAM,eAAe;AA6B3C;;;GAGG;AAEH;IACE,kBACY,UAAoC,EAAU,SAAmB,EAAU,WAA0B;QAArG,eAAU,GAAV,UAAU,CAA0B;QAAU,cAAS,GAAT,SAAS,CAAU;QAAU,gBAAW,GAAX,WAAW,CAAe;IAAG,CAAC;IAErH;;;;;OAKG;IACH,uBAAI,GAAJ,UAAK,OAAY,EAAE,OAA6B;QAA7B,uBAA6B,GAA7B,YAA6B;QAC9C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAClF,CAAC;IACI,mBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,uBAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,wBAAwB,GAAG;QAClC,EAAC,IAAI,EAAE,QAAQ,GAAG;QAClB,EAAC,IAAI,EAAE,aAAa,GAAG;KACtB,CAAC;IACF,eAAC;AAAD,CAAC,AAtBD,IAsBC","sourcesContent":["import {Injectable, Injector, ComponentFactoryResolver} from '@angular/core';\n\nimport {NgbModalStack} from './modal-stack';\nimport {NgbModalRef} from './modal-ref';\n\n/**\n * Represent options available when opening new modal windows.\n */\nexport interface NgbModalOptions {\n  /**\n   * Whether a backdrop element should be created for a given modal (true by default).\n   * Alternatively, specify 'static' for a backdrop which doesn't close the modal on click.\n   */\n  backdrop?: boolean | 'static';\n\n  /**\n   * Whether to close the modal when escape key is pressed (true by default).\n   */\n  keyboard?: boolean;\n\n  /**\n   * Size of a new modal window.\n   */\n  size?: 'sm' | 'lg';\n\n  /**\n   * Custom class to append to the modal window\n   */\n  windowClass?: string;\n}\n\n/**\n * A service to open modal windows. Creating a modal is straightforward: create a template and pass it as an argument to\n * the \"open\" method!\n */\n\nexport class NgbModal {\n  constructor(\n      private _moduleCFR: ComponentFactoryResolver, private _injector: Injector, private _modalStack: NgbModalStack) {}\n\n  /**\n   * Opens a new modal window with the specified content and using supplied options. Content can be provided\n   * as a TemplateRef or a component type. If you pass a component type as content than instances of those\n   * components can be injected with an instance of the NgbActiveModal class. You can use methods on the\n   * NgbActiveModal class to close / dismiss modals from \"inside\" of a component.\n   */\n  open(content: any, options: NgbModalOptions = {}): NgbModalRef {\n    return this._modalStack.open(this._moduleCFR, this._injector, content, options);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: ComponentFactoryResolver, },\n{type: Injector, },\n{type: NgbModalStack, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}